import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, CardBody, Form, Button, Alert } from 'react-bootstrap';
import { Link, useNavigate,useLocation } from 'react-router-dom';
import axios from 'axios';
import API_BASE_URL from '../config';
import PageHelmet from '../components/PageHelmet';
import PageTitle from '../components/PageTitle';
import withAuthRedirect from '../hoc/withAuthRedirect';

const AddDeviceGeoPoint = () => {
    const customer_id = localStorage.getItem('id');
    const [projects, setProjects] = useState([]);
    const [devices, setDevices] = useState([]);
    const [geolocations, setGeolocations] = useState([]);
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        project: '',
        device: '',
        geolocation: '',
        device_movement: 0,
    });
    const [statusMessage, setStatusMessage] = useState(null);

    useEffect(() => {
        const fetchProjects = async () => {
            try {
              const response = await axios.get(`${API_BASE_URL}/projects/customer/${customer_id}/`); // Adjust endpoint as needed
              setProjects(response.data); // Update projects state with data from API
            } catch (error) {
              console.error('Error fetching projects:', error);
            }
          };

        const fetchDevices = async () => {
            const response = await axios.get(`${API_BASE_URL}/devices/`);
            setDevices(response.data);
        };

        const fetchGeolocations = async () => {
            const response = await axios.get(`${API_BASE_URL}/projectgeolocation/`);
            setGeolocations(response.data);
        };

        fetchProjects();
        fetchDevices();
        fetchGeolocations();
    }, []);
    
    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value,
        });
    };
    const handleSubmit22222 = async (e) => {
        e.preventDefault();
        try {
            await axios.put(`${API_BASE_URL}/devicegeopoint/add/`, formData);
            setStatusMessage('Device GeoPoint added successfully');
            // Optionally, reset the form here
            setFormData({
                project: '',
                device: '',
                geolocation: '',
                device_movement: 0,
            });
        } catch (error) {
            console.error('Error adding DeviceGeoPoint:', error);
            setStatusMessage('Error adding DeviceGeoPoint');
        }
    };
    const handleSubmit = async (e) => {
        e.preventDefault();
        console.log("Submitting formData:", formData);  // Log formData to check values
        try {
            await axios.put(`${API_BASE_URL}/devicegeopoint/add/`, formData);
            setStatusMessage('Device GeoPoint added successfully');
            setFormData({
                project: '',
                device: '',
                geolocation: '',
                device_movement: 0,
            });
            navigate('/device-geopoint');
        } catch (error) {
            console.error('Error adding DeviceGeoPoint:', error);
            setStatusMessage('Error adding DeviceGeoPoint');
        }
    };
  

    return (
        <Container fluid className="section">
            <PageHelmet />
            <Row className="g-3">
                <Col lg={12}>
                    <PageTitle title="Add DeviceGeoPoint" />
                </Col>
                <Col lg={12}>
                    <Card className="main-card">
                        <CardBody>
                            {statusMessage && (
                                <Alert variant={statusMessage.includes('Error') ? 'danger' : 'success'}>
                                    {statusMessage}
                                </Alert>
                            )}
                            <Form onSubmit={handleSubmit}>
                            <Form.Group controlId="project">
    <Form.Label>Project</Form.Label>
    <Form.Control
        as="select"
        name="project"
        value={formData.project}
        onChange={handleChange}
        required
    >
        <option value="">Select Project</option>
        {projects.map((project) => (
            <option key={project.project_id} value={project.project_id}>
                {project.project_name}
            </option>
        ))}
    </Form.Control>
</Form.Group>

                               

                                <Form.Group controlId="device">
                                    <Form.Label>Device</Form.Label>
                                    <Form.Control
                                        as="select"
                                        name="device"
                                        value={formData.device}
                                        onChange={handleChange}
                                        required
                                    >
                                        <option value="">Select Device</option>
                                        {devices.map((device) => (
                                            <option key={device.id} value={device.id}>
                                                {device.device_id}
                                            </option>
                                        ))}
                                    </Form.Control>
                                </Form.Group>

                                <Form.Group controlId="geolocation">
                                    <Form.Label>Geolocation</Form.Label>
                                    <Form.Control
                                        as="select"
                                        name="geolocation"
                                        value={formData.geolocation}
                                        onChange={handleChange}
                                        required
                                    >
                                        <option value="">Select Geolocation</option>
                                        {geolocations.map((geo) => (
                                            <option key={geo.id} value={geo.id}>
                                                {geo.latitude}, {geo.longitude}
                                            </option>
                                        ))}
                                    </Form.Control>
                                </Form.Group>

                                <Form.Group controlId="device_movement">
                                    <Form.Label>Device Movement</Form.Label>
                                    <Form.Control
                                        type="number"
                                        name="device_movement"
                                        value={formData.device_movement}
                                        onChange={handleChange}
                                        required
                                    />
                                </Form.Group>

                                <Button variant="primary" type="submit">
                                    Add DeviceGeoPoint
                                </Button>
                            </Form>
                        </CardBody>
                    </Card>
                </Col>
            </Row>
        </Container>
    );
};

export default withAuthRedirect(AddDeviceGeoPoint);
